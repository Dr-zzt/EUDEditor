## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import tempcustomText as tct;
import tempcustomText as tct
# (Line 3) const musicLastTime = [0, 0, 0, 0, 0, 0, 0, 0];
musicLastTime = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 4) const musicFrame = [0, 0, 0, 0, 0, 0, 0, 0];
musicFrame = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 5) const musicnum = [0, 0, 0, 0, 0, 0, 0, 0];
musicnum = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 6) const musicflag = [0, 0, 0, 0, 0, 0, 0, 0];
musicflag = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 7) const musicisplay = [0, 0, 0, 0, 0, 0, 0, 0];
musicisplay = _CGFW(lambda: [_ARR(FlattenList([0, 0, 0, 0, 0, 0, 0, 0]))], 1)[0]
# (Line 9) function Player() {
@EUDFunc
def Player():
    # (Line 10) var currentid = getcurpl();
    currentid = EUDVariable()
    currentid << (f_getcurpl())
    # (Line 11) for (var i = 0 ; i < 8 ; i++) {
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 8, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 12) if (musicisplay[i] == 1 && musicflag[i] != 2) {
        if EUDIf()(EUDSCAnd()(musicisplay[i] == 1)(musicflag[i] == 2, neg=True)()):
            # (Line 13) var playtime = musicLastTime[i] - dwread_epd(EPD(0x51CE8C));
            playtime = EUDVariable()
            playtime << (musicLastTime[i] - f_dwread_epd(EPD(0x51CE8C)))
            # (Line 14) var LastFrame;
            LastFrame = EUDVariable()
            # (Line 15) const music_No = musicnum[i];
            music_No = musicnum[i]
            # (Line 16) if (musicFrame[i] < LastFrame) {
            if EUDIf()(musicFrame[i] >= LastFrame, neg=True):
                # (Line 17) if (playtime > 3080) {
                if EUDIf()(playtime <= 3080, neg=True):
                    # (Line 18) tct.makeText('M');
                    tct.f_makeText('M')
                    # (Line 21) const music_name = musicnum[i];
                    music_name = musicnum[i]
                    # (Line 22) tct.addText(music_name);
                    tct.f_addText(music_name)
                    # (Line 24) tct.addText('_');
                    tct.f_addText('_')
                    # (Line 27) const music_frame = musicFrame[i];
                    music_frame = musicFrame[i]
                    # (Line 28) tct.addText(music_frame);
                    tct.f_addText(music_frame)
                    # (Line 32) tct.addText('.ogg');
                    tct.f_addText('.ogg')
                    # (Line 33) SetCurrentPlayer(i);
                    # (Line 35) musicFrame[i] = musicFrame[i] + 1;
                    DoActions(SetCurrentPlayer(i))
                    _ARRW(musicFrame, i) << (musicFrame[i] + 1)
                    # (Line 36) musicLastTime[i] = dwread_epd(EPD(0x51CE8C));
                    _ARRW(musicLastTime, i) << (f_dwread_epd(EPD(0x51CE8C)))
                    # (Line 37) }
                    # (Line 39) } else {
                EUDEndIf()
            if EUDElse()():
                # (Line 41) if (musicflag[i] == 1) {
                if EUDIf()(musicflag[i] == 1):
                    # (Line 43) musicFrame[i] = 0;
                    _ARRW(musicFrame, i) << (0)
                    # (Line 44) musicLastTime[i] = dwread_epd(EPD(0x51CE8C));
                    _ARRW(musicLastTime, i) << (f_dwread_epd(EPD(0x51CE8C)))
                    # (Line 45) }else if (musicflag[i] == 0) {
                if EUDElseIf()(musicflag[i] == 0):
                    # (Line 46) musicflag[i] = 2;
                    _ARRW(musicflag, i) << (2)
                    # (Line 47) }
                    # (Line 48) }
                EUDEndIf()
                # (Line 49) }
            EUDEndIf()
            # (Line 50) }
        EUDEndIf()
        # (Line 51) SetCurrentPlayer(currentid);
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 52) }
    DoActions(SetCurrentPlayer(currentid))
    # (Line 54) function parsePlayer(tplayer) {

@EUDFunc
def f_parsePlayer(tplayer):
    # (Line 55) if (tplayer < 8) {
    if EUDIf()(tplayer >= 8, neg=True):
        # (Line 56) return tplayer;
        EUDReturn(tplayer)
        # (Line 57) }else {
    if EUDElse()():
        # (Line 58) return getcurpl();
        EUDReturn(f_getcurpl())
        # (Line 59) }
        # (Line 60) }
    EUDEndIf()
    # (Line 62) function Play(tplayer,BGMNum, flag) {

@EUDFunc
def Play(tplayer, BGMNum, flag):
    # (Line 63) var p = parsePlayer(tplayer);
    p = EUDVariable()
    p << (f_parsePlayer(tplayer))
    # (Line 64) if (flag == 0 && musicflag[p] == 0) {
    if EUDIf()(EUDSCAnd()(flag == 0)(musicflag[p] == 0)()):
        # (Line 65) if (BGMNum != musicnum[p]) {
        if EUDIf()(BGMNum == musicnum[p], neg=True):
            # (Line 66) musicLastTime[p] = dwread_epd(EPD(0x51CE8C)) + 3150 ;
            _ARRW(musicLastTime, p) << (f_dwread_epd(EPD(0x51CE8C)) + 3150)
            # (Line 67) musicFrame[p] = 0;
            _ARRW(musicFrame, p) << (0)
            # (Line 68) }
            # (Line 69) musicnum[p] = BGMNum;
        EUDEndIf()
        _ARRW(musicnum, p) << (BGMNum)
        # (Line 70) musicflag[p] = flag;
        _ARRW(musicflag, p) << (flag)
        # (Line 71) musicisplay[p] = 1;
        _ARRW(musicisplay, p) << (1)
        # (Line 72) }else {
    if EUDElse()():
        # (Line 73) musicLastTime[p] = dwread_epd(EPD(0x51CE8C)) + 3150;
        _ARRW(musicLastTime, p) << (f_dwread_epd(EPD(0x51CE8C)) + 3150)
        # (Line 74) musicFrame[p] = 0;
        _ARRW(musicFrame, p) << (0)
        # (Line 75) musicnum[p] = BGMNum;
        _ARRW(musicnum, p) << (BGMNum)
        # (Line 76) musicflag[p] = flag;
        _ARRW(musicflag, p) << (flag)
        # (Line 77) musicisplay[p] = 1;
        _ARRW(musicisplay, p) << (1)
        # (Line 78) }
        # (Line 79) }
    EUDEndIf()
    # (Line 81) function Stop(tplayer) {

@EUDFunc
def Stop(tplayer):
    # (Line 82) var p = parsePlayer(tplayer);
    p = EUDVariable()
    p << (f_parsePlayer(tplayer))
    # (Line 83) musicisplay[p] = 0;
    _ARRW(musicisplay, p) << (0)
    # (Line 84) }
    # (Line 86) function Resume(tplayer) {

@EUDFunc
def Resume(tplayer):
    # (Line 87) var p = parsePlayer(tplayer);
    p = EUDVariable()
    p << (f_parsePlayer(tplayer))
    # (Line 88) musicisplay[p] = 1;
    _ARRW(musicisplay, p) << (1)
    # (Line 89) }
    # (Line 91) function CurrentPlayMusic(tplayer) {

@EUDFunc
def CurrentPlayMusic(tplayer):
    # (Line 92) var p = parsePlayer(tplayer);
    p = EUDVariable()
    p << (f_parsePlayer(tplayer))
    # (Line 93) return musicnum[p];
    EUDReturn(musicnum[p])
    # (Line 94) }
    # (Line 96) function isplaying(tplayer) {

@EUDFunc
def f_isplaying(tplayer):
    # (Line 97) var p = parsePlayer(tplayer);
    p = EUDVariable()
    p << (f_parsePlayer(tplayer))
    # (Line 98) return musicflag[p];
    EUDReturn(musicflag[p])
    # (Line 99) }
